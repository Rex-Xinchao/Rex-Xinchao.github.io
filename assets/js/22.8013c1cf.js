(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{380:function(e,n,t){"use strict";t.r(n);var a=t(42),r=Object(a.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h3",{attrs:{id:"electron-官网"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#electron-官网"}},[e._v("#")]),e._v(" Electron "),t("a",{attrs:{href:"https://electronjs.org/",title:"electron官网",target:"_blank",rel:"noopener noreferrer"}},[e._v("官网"),t("OutboundLink")],1),t("br")]),e._v(" "),t("p",[e._v("Electron 是由 Github 开发，用 HTML，CSS 和 JavaScript 来构建跨平台桌面应用程序的一个开源库。"),t("br"),e._v("\nElectron 通过将 Chromium 和 Node.js 合并到同一个运行时环境中，并将其打包为 Mac，Windows 和 Linux 系统下的应\n用来实现这一目的。<")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("兼容性")]),e._v(" "),t("blockquote",[t("ul",[t("li",[e._v("macOS 10.10 (Yosemite) 及以上版本")]),e._v(" "),t("li",[e._v("Windows 7 及以上版本")]),e._v(" "),t("li",[e._v("Ubuntu 12.04、Fedora 21、Debian 8 及其以上版本。")])])])]),e._v(" "),t("li",[t("p",[e._v("开发环境（需要 NodeJs）")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("安装 electron")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("npm install --save-dev electron\n")])])])])]),e._v(" "),t("li",[t("p",[e._v("基于 vue 脚手架开发")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("# 安装 vue-cli 和 脚手架样板代码\nnpm install -g vue-cli\nvue init simulatedgreg/electron-vue my-project\n")])])])])])])])]),e._v(" "),t("h3",{attrs:{id:"electorn-实例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#electorn-实例"}},[e._v("#")]),e._v(" electorn 实例")]),e._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[e._v("主进程和渲染进程交互")]),e._v(" "),t("ul",[t("li",[e._v("主进程")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 实现全屏切换效果\nipcMain.on('setFullScreen', (isFullScreen) => {\n  mainWindow.setFullScreen(isFullScreen)\n})\nipcMain.on('fullScreen', () => {\n  mainWindow.setFullScreen(true)\n})\nipcMain.on('exitFullScreen', () => {\n  mainWindow.setFullScreen(false)\n})\n")])])]),t("ul",[t("li",[e._v("渲染进程")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const {ipcRenderer} = require('electron')\nipcRenderer.send('fullScreen')\nipcRenderer.send('exitFullScreen')\n")])])])]),e._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[e._v("读写本地数据")]),e._v(" "),t("ul",[t("li",[e._v("安装")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" npm install --save electron-json-storage\n")])])]),t("ul",[t("li",[e._v("使用")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("  const storage = require('electron-json-storage')\n  // 设置路径\n  storage.setDefaultDataPath()\n  storage.getDefaultDataPath()\n  // 读写数据\n  storage.set(key, value, function (error) {\n    if (error) throw error\n    if (callback) {\n      callback()\n    }\n  })\n  storage.get(key, function (error, data) {\n    if (error) throw error\n    if (callback) {\n      callback(data)\n    }\n  })\n")])])])]),e._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[e._v("读写文件")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("  // 异步读取文件的时候由操作系统在后台进行读取\n  // 异步不会阻碍下面的代码执行。同步读取的时候会阻碍下面的代码执行\n  const fs = require('fs')\n  const PATH = path.join(__dirname, './static/log/'),\n  // fs.existsSync(filePath) 判断文件是否存在\n  // 写入\n  writeFile (fileName, data) {\n    let _path = PATH.filePath + fileName\n    // 方案1\n    fs.writeFile(_path, data, function (err) {\n      console.log(err)\n      if (!err) {\n        console.log('写入成功。')\n      }\n    })\n    // 方案2\n    fs.writeFileSync(_path, data)\n  },\n  // 读取\n  readFile (fileName) {\n    let _path = PATH.filePath + fileName\n    // 方案1\n    fs.readFile(_path, 'utf8', function (err, data) {\n      console.log(data)\n      if (err) return console.log(err)\n    })\n     // 方案2\n    fs.readFileSync(_path, 'utf8')\n  },\n")])])])]),e._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[e._v("自动化更新")]),e._v(" "),t("ul",[t("li",[e._v("安装 electron-updater 包模块")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("npm install electron-updater --save\n")])])]),t("ul",[t("li",[e._v("配置 package.json 文件的 build-publish 参数")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(' "publish": [\n      {\n        "provider": "generic",\n        "url": "http://**.**.**.**:3002/download/",//更新服务器地址,可为空\n      }\n    ]\n')])])]),t("ul",[t("li",[e._v("配置 package.json 文件的 build-nsis 参数（可省略）\n"),t("blockquote",[t("p",[e._v("nsis 配置不会影响自动更新功能，但是可以优化用户体验，比如是否允许用户自定义安装位置、是否添加桌面快捷方式、装完成是否立即启动、配置安装图标等。nsis 配置也是添加在 build 参数中。\n"),t("a",{attrs:{href:"https://www.electron.build/configuration/nsis,",title:"nsis官网",target:"_blank",rel:"noopener noreferrer"}},[e._v("配置"),t("OutboundLink")],1)])])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('"nsis": {\n      "oneClick": true,\n      "perMachine": true,\n      "allowElevation": true,\n      "allowToChangeInstallationDirectory": true,\n      "createDesktopShortcut": true,\n      "runAfterFinish": true,\n      "installerIcon": "./build/icon.ico",\n      "uninstallerIcon": "./build/icon.ico"\n    },\n')])])]),t("ul",[t("li",[e._v("配置主进程")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("import { app, BrowserWindow, ipcMain } from 'electron'\n\n// 注意这个autoUpdater不是electron中的autoUpdater\nimport { autoUpdater } from \"electron-updater\"\n// 更新服务器地址，比如\"http://**.**.**.**:3002/download/\"\nimport {uploadUrl} from \"../renderer/config/config\";\n\n// 检测更新，在你想要检查更新的时候执行，renderer事件触发后的操作自行编写\nfunction updateHandle() {\n  let message = {\n    error: '检查更新出错',\n    checking: '正在检查更新……',\n    updateAva: '检测到新版本，正在下载……',\n    updateNotAva: '现在使用的就是最新版本，不用更新',\n  };\n  const os = require('os');\n\n  autoUpdater.setFeedURL(uploadUrl);\n  autoUpdater.on('error', function (error) {\n    sendUpdateMessage(message.error)\n  });\n  autoUpdater.on('checking-for-update', function () {\n    sendUpdateMessage(message.checking)\n  });\n  autoUpdater.on('update-available', function (info) {\n    sendUpdateMessage(message.updateAva)\n  });\n  autoUpdater.on('update-not-available', function (info) {\n    sendUpdateMessage(message.updateNotAva)\n  });\n\n  // 更新下载进度事件\n  autoUpdater.on('download-progress', function (progressObj) {\n    mainWindow.webContents.send('downloadProgress', progressObj)\n  })\n  autoUpdater.on('update-downloaded', function (event, releaseNotes, releaseName, releaseDate, updateUrl, quitAndUpdate) {\n\n    ipcMain.on('isUpdateNow', (e, arg) =&gt; {\n      console.log(arguments);\n      console.log(\"开始更新\");\n      //some code here to handle event\n      autoUpdater.quitAndInstall();\n    });\n\n    mainWindow.webContents.send('isUpdateNow')\n  });\n\n  ipcMain.on(\"checkForUpdate\",()=&gt;{\n      //执行自动更新检查\n      autoUpdater.checkForUpdates();\n  })\n}\n\n// 通过main进程发送事件给renderer进程，提示更新信息\nfunction sendUpdateMessage(text) {\n  mainWindow.webContents.send('message', text)\n}\n")])])]),t("p",[e._v("// 添加完成后，在主进程 createWindow 中需要调用一下 updateHandle()。")]),e._v(" "),t("ul",[t("li",[e._v("在视图（View）层中触发自动更新，并添加自动更新事件的监听")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('ipcRenderer.send("checkForUpdate");\n')])])]),t("ul",[t("li",[e._v("监听自动更新事件：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(' import { ipcRenderer } from "electron";\n  ipcRenderer.on("message", (event, text) =&gt; {\n            console.log(arguments);\n            this.tips = text;\n        });\n        //注意：“downloadProgress”事件可能存在无法触发的问题，只需要限制一下下载网速就好了\n        ipcRenderer.on("downloadProgress", (event, progressObj)=&gt; {\n            console.log(progressObj);\n            this.downloadPercent = progressObj.percent || 0;\n        });\n        ipcRenderer.on("isUpdateNow", () =&gt; {\n            ipcRenderer.send("isUpdateNow");\n        });\n')])])])]),e._v(" "),t("h3",{attrs:{id:"参考资料"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[e._v("#")]),e._v(" 参考资料")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://electronjs.org/docs,",title:"官方文档",target:"_blank",rel:"noopener noreferrer"}},[e._v("官方文档"),t("OutboundLink")],1),e._v(" "),t("a",{attrs:{href:"https://simulatedgreg.gitbooks.io/electron-vue/content/cn/savingreading-local-files.html,",title:"资料",target:"_blank",rel:"noopener noreferrer"}},[e._v("资料"),t("OutboundLink")],1)])])}),[],!1,null,null,null);n.default=r.exports}}]);